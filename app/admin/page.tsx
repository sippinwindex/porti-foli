// Enhanced Admin Page - Consistent with Navigation Theme System
'use client'

import { useState, useEffect, Suspense } from 'react'
import { redirect } from 'next/navigation'
import dynamic from 'next/dynamic'
import { motion, AnimatePresence } from 'framer-motion'
import { 
  Shield, 
  LogOut, 
  RefreshCw, 
  Edit, 
  Github, 
  ExternalLink, 
  Star, 
  GitFork, 
  Activity, 
  Folder, 
  Lock,
  Eye,
  Settings,
  Crown,
  Sparkles
} from 'lucide-react'
import ProjectEditModal from '@/components/ProjectEditModal'
import { getSmartProjects, SmartProjectData } from '@/lib/smart-project-manager'

// Dynamic imports with fallbacks
const Navigation = dynamic(
  () => import('@/components/Navigation').catch(() => {
    console.warn('Failed to load Navigation, using fallback')
    return { default: () => <NavigationSkeleton /> }
  }),
  { 
    ssr: false,
    loading: () => <NavigationSkeleton />
  }
)

// Navigation Skeleton Component
function NavigationSkeleton() {
  return (
    <nav className="fixed top-0 left-0 right-0 z-[1000] h-20 bg-lux-offwhite/80 dark:bg-lux-black/80 backdrop-blur-md border-b border-lux-gray-200/50 dark:border-lux-gray-700/50">
      <div className="container mx-auto h-full flex justify-between items-center px-4">
        <div className="w-32 h-8 bg-lux-gray-200 dark:bg-lux-gray-800 rounded animate-pulse" />
        <div className="flex gap-4">
          {[1, 2, 3, 4].map(i => (
            <div key={i} className="w-20 h-8 bg-lux-gray-200 dark:bg-lux-gray-800 rounded animate-pulse" />
          ))}
        </div>
      </div>
    </nav>
  )
}

// Enhanced Loading Component with your theme
function LoadingSpinner({ message = "Loading..." }: { message?: string }) {
  return (
    <div className="min-h-screen bg-lux-offwhite dark:bg-lux-black flex items-center justify-center">
      <div className="text-center">
        <div className="relative mb-6">
          <div className="animate-spin rounded-full h-12 w-12 border-4 border-viva-magenta border-t-transparent mx-auto"></div>
          <div className="absolute inset-0 animate-pulse rounded-full h-12 w-12 border-2 border-lux-gold opacity-30 mx-auto"></div>
        </div>
        <p className="text-lux-gray-600 dark:text-lux-gray-400 font-medium">
          {message}
        </p>
      </div>
    </div>
  )
}

// Enhanced Project Card Component
function ProjectCard({ 
  project, 
  onEdit 
}: { 
  project: SmartProjectData; 
  onEdit: (project: SmartProjectData) => void 
}) {
  const isFeatured = project.customizable.featured ?? project.autoGenerated.featured
  
  return (
    <motion.div
      className="glass-card rounded-xl border border-lux-gray-200/50 dark:border-lux-gray-700/50 overflow-hidden hover:border-viva-magenta/50 transition-all duration-300 group"
      whileHover={{ scale: 1.02, y: -5 }}
      transition={{ type: "spring", stiffness: 300, damping: 30 }}
    >
      <div className="p-6">
        <div className="flex items-start justify-between mb-4">
          <div className="flex-1 min-w-0">
            <h3 className="text-lg font-semibold text-lux-gray-900 dark:text-lux-offwhite mb-1 truncate flex items-center gap-2">
              {project.name}
              {isFeatured && <Crown className="w-4 h-4 text-lux-gold" />}
            </h3>
            <p className="text-sm text-lux-gray-600 dark:text-lux-gray-400 line-clamp-2">
              {project.customizable.customDescription || project.description}
            </p>
          </div>
          {isFeatured && (
            <span className="ml-2 px-2 py-1 bg-gradient-to-r from-lux-gold to-viva-magenta text-lux-offwhite text-xs font-medium rounded-full flex-shrink-0 flex items-center gap-1">
              <Sparkles className="w-3 h-3" />
              Featured
            </span>
          )}
        </div>

        <div className="flex items-center justify-between text-sm text-lux-gray-500 dark:text-lux-gray-400 mb-4">
          <div className="flex items-center gap-1">
            <Star className="w-3 h-3" />
            <span>{project.githubData.stars}</span>
          </div>
          <div className="flex items-center gap-1">
            <GitFork className="w-3 h-3" />
            <span>{project.githubData.forks}</span>
          </div>
          <span className="capitalize px-2 py-1 bg-lux-teal/20 text-lux-teal rounded-full text-xs">
            {project.customizable.category || project.autoGenerated.category}
          </span>
        </div>

        <div className="flex flex-wrap gap-1 mb-4">
          {project.autoGenerated.techStack.slice(0, 3).map((tech) => (
            <span
              key={tech}
              className="px-2 py-1 bg-viva-magenta/10 text-viva-magenta border border-viva-magenta/20 text-xs rounded-md font-medium"
            >
              {tech}
            </span>
          ))}
          {project.autoGenerated.techStack.length > 3 && (
            <span className="px-2 py-1 bg-lux-gray-100 dark:bg-lux-gray-700 text-lux-gray-500 dark:text-lux-gray-400 text-xs rounded-md">
              +{project.autoGenerated.techStack.length - 3} more
            </span>
          )}
        </div>

        <div className="flex items-center justify-between">
          <div className="flex items-center space-x-3">
            {project.vercelData?.isLive && (
              <div className="flex items-center gap-1" title="Live deployment">
                <div className="w-2 h-2 bg-green-500 rounded-full animate-pulse"></div>
                <span className="text-xs text-green-600 dark:text-green-400 font-medium">Live</span>
              </div>
            )}
            <div className="flex items-center gap-1">
              <Activity className="w-3 h-3 text-lux-gray-500 dark:text-lux-gray-400" />
              <span className="text-xs text-lux-gray-500 dark:text-lux-gray-400">
                Score: {project.autoGenerated.deploymentScore}
              </span>
            </div>
          </div>

          <div className="flex items-center space-x-2">
            <motion.a
              href={project.githubData.url}
              target="_blank"
              rel="noopener noreferrer"
              className="p-2 text-lux-gray-600 hover:text-lux-gray-800 dark:text-lux-gray-400 dark:hover:text-lux-gray-200 transition-colors rounded-lg hover:bg-lux-gray-100 dark:hover:bg-lux-gray-800"
              title="View on GitHub"
              whileHover={{ scale: 1.1 }}
              whileTap={{ scale: 0.95 }}
            >
              <Github className="w-4 h-4" />
            </motion.a>
            <motion.button
              onClick={() => onEdit(project)}
              className="btn-primary text-sm px-4 py-2 flex items-center gap-2"
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.95 }}
            >
              <Edit className="w-3 h-3" />
              Edit
            </motion.button>
          </div>
        </div>
      </div>
    </motion.div>
  )
}

export default function AdminPage() {
  const [isAuthenticated, setIsAuthenticated] = useState(false)
  const [password, setPassword] = useState('')
  const [projects, setProjects] = useState<SmartProjectData[]>([])
  const [selectedProject, setSelectedProject] = useState<SmartProjectData | null>(null)
  const [isEditModalOpen, setIsEditModalOpen] = useState(false)
  const [loading, setLoading] = useState(true)
  const [authLoading, setAuthLoading] = useState(false)
  const [authError, setAuthError] = useState('')
  const [mounted, setMounted] = useState(false)

  // Check if we're in development mode
  const isDevelopment = process.env.NODE_ENV === 'development'

  // Prevent hydration issues
  useEffect(() => {
    setMounted(true)
  }, [])
  
  // Check authentication status on mount
  useEffect(() => {
    if (!mounted) return
    checkAuthStatus()
  }, [mounted])

  const checkAuthStatus = async () => {
    if (isDevelopment) {
      // Auto-authenticate in development
      setIsAuthenticated(true)
      loadProjects()
      setLoading(false)
      return
    }

    try {
      const response = await fetch('/api/admin-verify')
      const data = await response.json()
      
      if (response.ok && data.authenticated) {
        setIsAuthenticated(true)
        loadProjects()
      }
    } catch (error) {
      console.error('Auth check failed:', error)
      // In production, redirect if not localhost/vercel
      const hostname = window.location.hostname
      const isLocalhost = hostname === 'localhost' || hostname === '127.0.0.1'
      const isVercelPreview = hostname.includes('vercel.app')
      const isYourDomain = hostname === 'juanfernandez.dev' || hostname === 'juan-fernandez.vercel.app'
      
      if (!isLocalhost && !isVercelPreview && !isYourDomain) {
        redirect('/')
      }
    } finally {
      setLoading(false)
    }
  }

  const handleLogin = async (e: React.FormEvent) => {
    e.preventDefault()
    setAuthLoading(true)
    setAuthError('')

    try {
      const response = await fetch('/api/admin-auth', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ password }),
      })

      const data = await response.json()

      if (response.ok && data.success) {
        setIsAuthenticated(true)
        setPassword('') // Clear password from memory
        loadProjects()
      } else {
        setAuthError(data.error || 'Invalid password')
      }
    } catch (error) {
      setAuthError('Authentication failed. Please try again.')
      console.error('Login error:', error)
    } finally {
      setAuthLoading(false)
    }
  }

  const handleLogout = async () => {
    try {
      await fetch('/api/admin-logout', { method: 'POST' })
      setIsAuthenticated(false)
      setPassword('')
      setProjects([])
    } catch (error) {
      console.error('Logout error:', error)
      // Force logout even if API fails
      setIsAuthenticated(false)
    }
  }

  const loadProjects = async () => {
    setLoading(true)
    try {
      const projectData = await getSmartProjects()
      setProjects(projectData)
    } catch (error) {
      console.error('Failed to load projects:', error)
    } finally {
      setLoading(false)
    }
  }

  const openEditModal = (project: SmartProjectData) => {
    setSelectedProject(project)
    setIsEditModalOpen(true)
  }

  const handleSaveProject = () => {
    setIsEditModalOpen(false)
    loadProjects() // Refresh the list
  }

  // Show loading during hydration
  if (!mounted || loading) {
    return <LoadingSpinner message={!mounted ? 'Initializing admin panel...' : 'Loading admin panel...'} />
  }

  // Login screen
  if (!isAuthenticated) {
    return (
      <div className="min-h-screen bg-lux-offwhite dark:bg-lux-black relative overflow-hidden">
        {/* Navigation */}
        <div className="relative z-[1000]">
          <Suspense fallback={<NavigationSkeleton />}>
            <Navigation />
          </Suspense>
        </div>

        {/* Background Elements */}
        <div className="absolute inset-0 overflow-hidden pointer-events-none">
          <motion.div
            className="absolute top-20 right-10 w-72 h-72 bg-viva-magenta/10 rounded-full blur-3xl"
            animate={{
              scale: [1, 1.2, 1],
              opacity: [0.3, 0.5, 0.3]
            }}
            transition={{
              duration: 8,
              repeat: Infinity,
              ease: "easeInOut"
            }}
          />
          <motion.div
            className="absolute bottom-20 left-10 w-96 h-96 bg-lux-gold/10 rounded-full blur-3xl"
            animate={{
              scale: [1.2, 1, 1.2],
              opacity: [0.2, 0.4, 0.2]
            }}
            transition={{
              duration: 10,
              repeat: Infinity,
              ease: "easeInOut",
              delay: 2
            }}
          />
        </div>

        {/* Login Content */}
        <div className="relative z-10 pt-32 pb-20 flex items-center justify-center min-h-screen">
          <motion.div
            className="w-full max-w-md mx-4"
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.6, ease: [0.22, 1, 0.36, 1] }}
          >
            <div className="glass-card rounded-2xl shadow-xl p-8 border border-lux-gray-200/50 dark:border-lux-gray-700/50">
              <div className="text-center mb-8">
                <motion.div
                  className="w-16 h-16 mx-auto rounded-xl bg-gradient-to-br from-viva-magenta to-lux-gold p-1 mb-4"
                  whileHover={{ scale: 1.05, rotate: 5 }}
                  transition={{ type: "spring", stiffness: 300, damping: 30 }}
                >
                  <div className="w-full h-full rounded-lg bg-lux-offwhite dark:bg-lux-black flex items-center justify-center">
                    <Shield className="w-8 h-8 text-viva-magenta" />
                  </div>
                </motion.div>
                
                <h1 className="text-2xl font-bold gradient-text mb-2">
                  Portfolio Admin
                </h1>
                <p className="text-lux-gray-600 dark:text-lux-gray-400">
                  Enter password to access admin panel
                </p>
              </div>

              <form onSubmit={handleLogin} className="space-y-6">
                <div>
                  <label className="block text-sm font-medium text-lux-gray-700 dark:text-lux-gray-300 mb-2">
                    Admin Password
                  </label>
                  <div className="relative">
                    <Lock className="absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-lux-gray-400" />
                    <input
                      type="password"
                      value={password}
                      onChange={(e) => setPassword(e.target.value)}
                      className="w-full pl-10 pr-4 py-3 border border-lux-gray-300 dark:border-lux-gray-600 rounded-lg bg-lux-offwhite dark:bg-lux-gray-800 text-lux-gray-900 dark:text-lux-offwhite focus:ring-2 focus:ring-viva-magenta focus:border-viva-magenta transition-colors"
                      placeholder="Enter admin password"
                      required
                      autoFocus
                      disabled={authLoading}
                    />
                  </div>
                </div>

                <AnimatePresence>
                  {authError && (
                    <motion.div
                      initial={{ opacity: 0, scale: 0.95 }}
                      animate={{ opacity: 1, scale: 1 }}
                      exit={{ opacity: 0, scale: 0.95 }}
                      className="p-3 bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-lg"
                    >
                      <p className="text-sm text-red-600 dark:text-red-400 flex items-center gap-2">
                        <Shield className="w-4 h-4" />
                        {authError}
                      </p>
                    </motion.div>
                  )}
                </AnimatePresence>

                <motion.button
                  type="submit"
                  disabled={authLoading}
                  className="w-full btn-primary py-3 px-4 text-base font-medium flex items-center justify-center gap-2"
                  whileHover={{ scale: authLoading ? 1 : 1.02 }}
                  whileTap={{ scale: authLoading ? 1 : 0.98 }}
                >
                  {authLoading ? (
                    <>
                      <div className="animate-spin rounded-full h-4 w-4 border-2 border-white border-t-transparent"></div>
                      Authenticating...
                    </>
                  ) : (
                    <>
                      <Shield className="w-4 h-4" />
                      Access Admin Panel
                    </>
                  )}
                </motion.button>
              </form>

              {isDevelopment && (
                <motion.div
                  className="mt-6 p-4 bg-lux-gold/10 border border-lux-gold/20 rounded-lg"
                  initial={{ opacity: 0 }}
                  animate={{ opacity: 1 }}
                  transition={{ delay: 0.5 }}
                >
                  <p className="text-sm text-lux-gold flex items-center gap-2">
                    <Settings className="w-4 h-4" />
                    <strong>Development Mode:</strong> Admin access is automatically granted in development.
                  </p>
                </motion.div>
              )}
            </div>
          </motion.div>
        </div>
      </div>
    )
  }

  // Admin interface
  return (
    <div className="min-h-screen bg-lux-offwhite dark:bg-lux-black">
      {/* Navigation */}
      <div className="relative z-[1000]">
        <Suspense fallback={<NavigationSkeleton />}>
          <Navigation />
        </Suspense>
      </div>

      {/* Admin Header */}
      <div className="relative z-10 pt-20">
        <div className="glass-card border-b border-lux-gray-200/50 dark:border-lux-gray-700/50">
          <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            <div className="flex justify-between items-center h-16">
              <div className="flex items-center space-x-3">
                <motion.div 
                  className="w-10 h-10 bg-gradient-to-r from-viva-magenta to-lux-gold rounded-xl flex items-center justify-center"
                  whileHover={{ rotate: 180 }}
                  transition={{ duration: 0.3 }}
                >
                  <Shield className="w-5 h-5 text-lux-offwhite" />
                </motion.div>
                <div>
                  <h1 className="text-xl font-semibold gradient-text">
                    Portfolio Admin
                  </h1>
                  <p className="text-sm text-lux-gray-500 dark:text-lux-gray-400">
                    Manage your project portfolio
                  </p>
                </div>
              </div>

              <div className="flex items-center space-x-4">
                <motion.button
                  onClick={loadProjects}
                  disabled={loading}
                  className="btn-secondary text-sm px-4 py-2 flex items-center gap-2"
                  whileHover={{ scale: 1.05 }}
                  whileTap={{ scale: 0.95 }}
                >
                  <RefreshCw className={`w-4 h-4 ${loading ? 'animate-spin' : ''}`} />
                  {loading ? 'Refreshing...' : 'Refresh'}
                </motion.button>
                <motion.button
                  onClick={handleLogout}
                  className="text-sm font-medium text-red-600 hover:text-red-700 dark:text-red-400 dark:hover:text-red-300 px-4 py-2 rounded-lg hover:bg-red-50 dark:hover:bg-red-900/20 transition-colors flex items-center gap-2"
                  whileHover={{ scale: 1.05 }}
                  whileTap={{ scale: 0.95 }}
                >
                  <LogOut className="w-4 h-4" />
                  Logout
                </motion.button>
              </div>
            </div>
          </div>
        </div>

        {/* Main Content */}
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
          <AnimatePresence mode="wait">
            {loading ? (
              <motion.div
                key="loading"
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
                exit={{ opacity: 0 }}
                className="text-center py-12"
              >
                <div className="relative mb-6">
                  <div className="animate-spin rounded-full h-12 w-12 border-4 border-viva-magenta border-t-transparent mx-auto"></div>
                  <div className="absolute inset-0 animate-pulse rounded-full h-12 w-12 border-2 border-lux-gold opacity-30 mx-auto"></div>
                </div>
                <p className="text-lux-gray-600 dark:text-lux-gray-400 font-medium">
                  Loading projects from GitHub...
                </p>
              </motion.div>
            ) : projects.length === 0 ? (
              <motion.div
                key="empty"
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                exit={{ opacity: 0, y: -20 }}
                className="text-center py-12"
              >
                <div className="w-16 h-16 mx-auto mb-4 rounded-xl bg-lux-gray-100 dark:bg-lux-gray-800 flex items-center justify-center">
                  <Folder className="w-8 h-8 text-lux-gray-400" />
                </div>
                <h3 className="text-lg font-medium text-lux-gray-900 dark:text-lux-offwhite mb-2">
                  No projects found
                </h3>
                <p className="text-lux-gray-600 dark:text-lux-gray-400 mb-4 max-w-md mx-auto">
                  Make sure your GitHub token is configured and you have public repositories.
                </p>
                <motion.button
                  onClick={loadProjects}
                  className="btn-primary px-6 py-3 flex items-center gap-2 mx-auto"
                  whileHover={{ scale: 1.05 }}
                  whileTap={{ scale: 0.95 }}
                >
                  <RefreshCw className="w-4 h-4" />
                  Try Again
                </motion.button>
              </motion.div>
            ) : (
              <motion.div
                key="projects"
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
                exit={{ opacity: 0 }}
              >
                <div className="mb-8">
                  <motion.div
                    initial={{ opacity: 0, y: 10 }}
                    animate={{ opacity: 1, y: 0 }}
                    className="flex items-center justify-between"
                  >
                    <div>
                      <h2 className="text-2xl font-bold gradient-text mb-2 flex items-center gap-2">
                        <Github className="w-6 h-6" />
                        GitHub Projects ({projects.length})
                      </h2>
                      <p className="text-sm text-lux-gray-600 dark:text-lux-gray-400">
                        Click "Edit" on any project to customize how it appears in your portfolio.
                      </p>
                    </div>
                    <div className="flex items-center gap-2 text-sm text-lux-gray-500 dark:text-lux-gray-400">
                      <Eye className="w-4 h-4" />
                      <span>{projects.filter(p => p.customizable.featured ?? p.autoGenerated.featured).length} featured</span>
                    </div>
                  </motion.div>
                </div>

                <motion.div 
                  className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6"
                  initial={{ opacity: 0 }}
                  animate={{ opacity: 1 }}
                  transition={{ staggerChildren: 0.1 }}
                >
                  {projects.map((project, index) => (
                    <motion.div
                      key={project.id}
                      initial={{ opacity: 0, y: 20 }}
                      animate={{ opacity: 1, y: 0 }}
                      transition={{ delay: index * 0.1 }}
                    >
                      <ProjectCard
                        project={project}
                        onEdit={openEditModal}
                      />
                    </motion.div>
                  ))}
                </motion.div>
              </motion.div>
            )}
          </AnimatePresence>
        </div>
      </div>

      {/* Edit Modal */}
      <ProjectEditModal
        project={selectedProject}
        isOpen={isEditModalOpen}
        onClose={() => setIsEditModalOpen(false)}
        onSave={handleSaveProject}
      />
    </div>
  )
}