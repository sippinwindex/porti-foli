'use client'

import { useState, useEffect } from 'react'
import { motion, AnimatePresence } from 'framer-motion'
import { X, Save, RotateCcw, Star, ExternalLink } from 'lucide-react'
import { SmartProjectData, updateProjectCustomization } from '@/lib/smart-project-manager'

interface ProjectEditModalProps {
  project: SmartProjectData | null
  isOpen: boolean
  onClose: () => void
  onSave: () => void
}

export default function ProjectEditModal({ project, isOpen, onClose, onSave }: ProjectEditModalProps) {
  const [formData, setFormData] = useState<any>({})
  const [activeTab, setActiveTab] = useState('basic')

  useEffect(() => {
    if (project) {
      setFormData({
        customDescription: project.customizable.customDescription || project.description,
        featured: project.customizable.featured ?? project.autoGenerated.featured,
        category: project.customizable.category || project.autoGenerated.category,
        client: project.customizable.client || '',
        teamSize: project.customizable.teamSize || 1,
        role: project.customizable.role || 'Developer',
        highlights: project.customizable.highlights || [],
        caseStudy: project.customizable.caseStudy || {
          problem: '',
          solution: '',
          impact: ''
        },
        priority: project.customizable.priority || project.autoGenerated.deploymentScore
      })
    }
  }, [project])

  const handleSave = () => {
    if (project) {
      updateProjectCustomization(project.name, formData)
      onSave()
    }
  }

  const updateField = (field: string, value: any) => {
    setFormData((prev: any) => ({ ...prev, [field]: value }))
  }

  const updateNestedField = (parent: string, field: string, value: any) => {
    setFormData((prev: any) => ({
      ...prev,
      [parent]: { ...prev[parent], [field]: value }
    }))
  }

  const addHighlight = () => {
    const highlights = [...(formData.highlights || []), '']
    updateField('highlights', highlights)
  }

  const updateHighlight = (index: number, value: string) => {
    const highlights = [...(formData.highlights || [])]
    highlights[index] = value
    updateField('highlights', highlights)
  }

  const removeHighlight = (index: number) => {
    const highlights = formData.highlights.filter((_: any, i: number) => i !== index)
    updateField('highlights', highlights)
  }

  if (!project) return null

  const tabs = [
    { id: 'basic', label: 'Basic Info' },
    { id: 'details', label: 'Project Details' },
    { id: 'case-study', label: 'Case Study' },
    { id: 'highlights', label: 'Highlights' }
  ]

  return (
    <AnimatePresence>
      {isOpen && (
        <motion.div
          className="fixed inset-0 z-50 flex items-center justify-center p-4"
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          exit={{ opacity: 0 }}
        >
          {/* Backdrop */}
          <motion.div
            className="absolute inset-0 bg-black/60 backdrop-blur-sm"
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            onClick={onClose}
          />

          {/* Modal */}
          <motion.div
            className="relative w-full max-w-4xl max-h-[90vh] overflow-hidden bg-white dark:bg-gray-900 rounded-2xl shadow-2xl"
            initial={{ scale: 0.9, opacity: 0 }}
            animate={{ scale: 1, opacity: 1 }}
            exit={{ scale: 0.9, opacity: 0 }}
            transition={{ type: 'spring', damping: 25, stiffness: 300 }}
          >
            {/* Header */}
            <div className="flex items-center justify-between p-6 border-b border-gray-200 dark:border-gray-700">
              <div className="flex items-center space-x-3">
                <div className="w-8 h-8 bg-gradient-to-r from-blue-500 to-purple-500 rounded-lg flex items-center justify-center">
                  <Star className="w-4 h-4 text-white" />
                </div>
                <div>
                  <h2 className="text-xl font-semibold text-gray-900 dark:text-white">
                    Edit Project: {project.name}
                  </h2>
                  <p className="text-sm text-gray-500 dark:text-gray-400">
                    Customize how this project appears in your portfolio
                  </p>
                </div>
              </div>
              <button
                onClick={onClose}
                className="p-2 text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-800 transition-colors"
              >
                <X className="w-5 h-5" />
              </button>
            </div>

            {/* Tabs */}
            <div className="flex border-b border-gray-200 dark:border-gray-700">
              {tabs.map((tab) => (
                <button
                  key={tab.id}
                  onClick={() => setActiveTab(tab.id)}
                  className={`px-6 py-3 text-sm font-medium transition-colors ${
                    activeTab === tab.id
                      ? 'text-blue-600 dark:text-blue-400 border-b-2 border-blue-600 dark:border-blue-400'
                      : 'text-gray-500 dark:text-gray-400 hover:text-gray-700 dark:hover:text-gray-200'
                  }`}
                >
                  {tab.label}
                </button>
              ))}
            </div>

            {/* Content */}
            <div className="overflow-y-auto max-h-[60vh]">
              <div className="p-6">
                {/* Basic Info Tab */}
                {activeTab === 'basic' && (
                  <div className="space-y-6">
                    <div>
                      <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                        Custom Description
                      </label>
                      <textarea
                        value={formData.customDescription || ''}
                        onChange={(e) => updateField('customDescription', e.target.value)}
                        className="w-full p-3 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-800 text-gray-900 dark:text-white resize-none"
                        rows={3}
                        placeholder="Enhanced description for your portfolio..."
                      />
                      <p className="mt-1 text-xs text-gray-500">
                        Leave empty to use GitHub description: "{project.description}"
                      </p>
                    </div>

                    <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                      <div>
                        <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                          Featured Project
                        </label>
                        <div className="flex items-center space-x-2">
                          <input
                            type="checkbox"
                            checked={formData.featured}
                            onChange={(e) => updateField('featured', e.target.checked)}
                            className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                          />
                          <span className="text-sm text-gray-600 dark:text-gray-400">
                            Show in featured section
                          </span>
                        </div>
                        {project.autoGenerated.featured && (
                          <p className="mt-1 text-xs text-green-600 dark:text-green-400">
                            âœ¨ Auto-detected as featured
                          </p>
                        )}
                      </div>

                      <div>
                        <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                          Category
                        </label>
                        <select
                          value={formData.category}
                          onChange={(e) => updateField('category', e.target.value)}
                          className="w-full p-3 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-800 text-gray-900 dark:text-white"
                        >
                          <option value="fullstack">Full Stack</option>
                          <option value="frontend">Frontend</option>
                          <option value="backend">Backend</option>
                          <option value="data">Data Science</option>
                          <option value="mobile">Mobile</option>
                          <option value="other">Other</option>
                        </select>
                        <p className="mt-1 text-xs text-gray-500">
                          Auto-detected: {project.autoGenerated.category}
                        </p>
                      </div>

                      <div>
                        <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                          Priority (1-100)
                        </label>
                        <input
                          type="number"
                          min="1"
                          max="100"
                          value={formData.priority}
                          onChange={(e) => updateField('priority', parseInt(e.target.value))}
                          className="w-full p-3 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-800 text-gray-900 dark:text-white"
                        />
                        <p className="mt-1 text-xs text-gray-500">
                          Higher numbers appear first
                        </p>
                      </div>
                    </div>
                  </div>
                )}

                {/* Project Details Tab */}
                {activeTab === 'details' && (
                  <div className="space-y-6">
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div>
                        <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                          Client/Company
                        </label>
                        <input
                          type="text"
                          value={formData.client}
                          onChange={(e) => updateField('client', e.target.value)}
                          className="w-full p-3 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-800 text-gray-900 dark:text-white"
                          placeholder="Client or company name"
                        />
                      </div>

                      <div>
                        <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                          Your Role
                        </label>
                        <input
                          type="text"
                          value={formData.role}
                          onChange={(e) => updateField('role', e.target.value)}
                          className="w-full p-3 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-800 text-gray-900 dark:text-white"
                          placeholder="Full-Stack Developer"
                        />
                      </div>
                    </div>

                    <div>
                      <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                        Team Size
                      </label>
                      <input
                        type="number"
                        min="1"
                        value={formData.teamSize}
                        onChange={(e) => updateField('teamSize', parseInt(e.target.value))}
                        className="w-full p-3 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-800 text-gray-900 dark:text-white"
                      />
                    </div>

                    {/* Auto-detected tech stack display */}
                    <div>
                      <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                        Tech Stack (Auto-detected)
                      </label>
                      <div className="flex flex-wrap gap-2">
                        {project.autoGenerated.techStack.map((tech, index) => (
                          <span
                            key={index}
                            className="px-3 py-1 bg-blue-100 dark:bg-blue-900/30 text-blue-800 dark:text-blue-300 rounded-full text-sm"
                          >
                            {tech}
                          </span>
                        ))}
                      </div>
                    </div>
                  </div>
                )}

                {/* Case Study Tab */}
                {activeTab === 'case-study' && (
                  <div className="space-y-6">
                    <div>
                      <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                        Problem
                      </label>
                      <textarea
                        value={formData.caseStudy?.problem || ''}
                        onChange={(e) => updateNestedField('caseStudy', 'problem', e.target.value)}
                        className="w-full p-3 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-800 text-gray-900 dark:text-white resize-none"
                        rows={3}
                        placeholder="What problem did this project solve?"
                      />
                    </div>

                    <div>
                      <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                        Solution
                      </label>
                      <textarea
                        value={formData.caseStudy?.solution || ''}
                        onChange={(e) => updateNestedField('caseStudy', 'solution', e.target.value)}
                        className="w-full p-3 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-800 text-gray-900 dark:text-white resize-none"
                        rows={3}
                        placeholder="How did you solve it?"
                      />
                    </div>

                    <div>
                      <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                        Impact
                      </label>
                      <textarea
                        value={formData.caseStudy?.impact || ''}
                        onChange={(e) => updateNestedField('caseStudy', 'impact', e.target.value)}
                        className="w-full p-3 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-800 text-gray-900 dark:text-white resize-none"
                        rows={3}
                        placeholder="What was the result or impact?"
                      />
                    </div>
                  </div>
                )}

                {/* Highlights Tab */}
                {activeTab === 'highlights' && (
                  <div className="space-y-4">
                    <div className="flex items-center justify-between">
                      <label className="block text-sm font-medium text-gray-700 dark:text-gray-300">
                        Project Highlights
                      </label>
                      <button
                        onClick={addHighlight}
                        className="px-3 py-1 bg-blue-600 text-white rounded-lg text-sm hover:bg-blue-700 transition-colors"
                      >
                        Add Highlight
                      </button>
                    </div>

                    {formData.highlights?.map((highlight: string, index: number) => (
                      <div key={index} className="flex items-center space-x-2">
                        <input
                          type="text"
                          value={highlight}
                          onChange={(e) => updateHighlight(index, e.target.value)}
                          className="flex-1 p-3 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-800 text-gray-900 dark:text-white"
                          placeholder="Key achievement or feature"
                        />
                        <button
                          onClick={() => removeHighlight(index)}
                          className="p-2 text-red-500 hover:text-red-700 transition-colors"
                        >
                          <X className="w-4 h-4" />
                        </button>
                      </div>
                    ))}

                    {(!formData.highlights || formData.highlights.length === 0) && (
                      <p className="text-gray-500 dark:text-gray-400 text-center py-8">
                        No highlights added yet. Click "Add Highlight" to get started.
                      </p>
                    )}
                  </div>
                )}
              </div>
            </div>

            {/* Footer */}
            <div className="flex items-center justify-between p-6 border-t border-gray-200 dark:border-gray-700 bg-gray-50 dark:bg-gray-800">
              <div className="flex items-center space-x-2 text-sm text-gray-500 dark:text-gray-400">
                <ExternalLink className="w-4 h-4" />
                <span>Changes save automatically</span>
              </div>
              
              <div className="flex items-center space-x-3">
                <button
                  onClick={() => {
                    // Reset to auto-generated values
                    setFormData({
                      customDescription: project.description,
                      featured: project.autoGenerated.featured,
                      category: project.autoGenerated.category,
                      client: '',
                      teamSize: 1,
                      role: 'Developer',
                      highlights: [],
                      caseStudy: { problem: '', solution: '', impact: '' },
                      priority: project.autoGenerated.deploymentScore
                    })
                  }}
                  className="flex items-center space-x-2 px-4 py-2 text-gray-600 dark:text-gray-400 hover:text-gray-800 dark:hover:text-gray-200 transition-colors"
                >
                  <RotateCcw className="w-4 h-4" />
                  <span>Reset</span>
                </button>
                
                <button
                  onClick={handleSave}
                  className="flex items-center space-x-2 px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
                >
                  <Save className="w-4 h-4" />
                  <span>Save Changes</span>
                </button>
              </div>
            </div>
          </motion.div>
        </motion.div>
      )}
    </AnimatePresence>
  )
}